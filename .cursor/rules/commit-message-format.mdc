---
description: 
globs: 
alwaysApply: false
---
## Commit Message Guidelines

This project uses @Conventional Commits to automatically generate changelogs and determine version bumps when the release workflow is triggered.

### Conventional Commit Format

Each commit message should follow this structure:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### **Commit Message Length Guidelines** üìè

**DEFAULT: Use single-line commit messages**
- **Most commits should be single-line** with a clear, concise description
- **Subject line**: 50 characters or less
- **Only use multi-line** for very complex changes that require detailed explanation

**When to use single-line (PREFERRED):**
- Adding a new feature
- Fixing a bug
- Updating documentation
- Refactoring code
- Most day-to-day development work

**When to use multi-line (RARE):**
- Major architectural changes
- Complex bug fixes affecting multiple components
- Breaking changes requiring detailed explanation
- Large feature implementations with multiple sub-components

### Commit Types

| Type | Description | Version Bump | Changelog Section |
|------|-------------|--------------|-------------------|
| `feat` | A new feature | Minor | Features |
| `fix` | A bug fix | Patch | Bug Fixes |
| `docs` | Documentation only changes | Patch | Documentation |
| `refactor` | Code change that neither fixes a bug nor adds a feature | Patch | Code Refactoring |
| `perf` | Performance improvements | Patch | Performance Improvements |
| `test` | Adding missing tests or correcting existing tests | Patch | Tests |
| `build` | Changes that affect the build system or external dependencies | Patch | Build System |
| `ci` | Changes to CI configuration files and scripts | Patch | Continuous Integration |
| `chore` | Other changes that don't modify src or test files | Patch | Miscellaneous |
| `style` | Changes that do not affect the meaning of the code | Patch | Styles |

### Breaking Changes

To indicate a breaking change, add `!` after the type or add `BREAKING CHANGE:` in the footer:

```bash
feat!: remove deprecated API endpoint

BREAKING CHANGE: The /v1/old-endpoint has been removed. Use /v1/new-endpoint instead.
```

This will trigger a **major** version bump.

### Examples

#### Good commit messages (single-line - PREFERRED):
```bash
feat: add user authentication middleware
fix: resolve database connection timeout issue
docs: update API documentation for user endpoints
refactor: improve error handling in user service
perf: optimize database queries for user feed
test: add unit tests for JWT token validation
build: update Go version to 1.21
ci: add automated security scanning
chore: update dependencies to latest versions
feat(auth): implement JWT token refresh mechanism
fix(api): handle edge case in pagination logic
```

#### Multi-line commit messages (ONLY for very complex changes):
```bash
git commit -m "feat!: redesign authentication system" \
           -m "- Replace JWT with OAuth 2.0 implementation" \
           -m "- Add support for multiple identity providers" \
           -m "- Implement refresh token rotation" \
           -m "- Update all API endpoints for new auth flow" \
           -m "" \
           -m "BREAKING CHANGE: All existing authentication tokens are invalidated." \
           -m "Clients must implement OAuth 2.0 flow to authenticate."
```

#### Poor commit messages (avoid these):
```bash
- update secret name
- comment tests for now
- fix stuff
- working on features
- WIP
- minor changes
```
